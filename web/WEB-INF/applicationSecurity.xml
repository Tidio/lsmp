<?xml version="1.0" encoding="UTF-8" ?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:security="http://www.springframework.org/schema/security" 
		xmlns:oauth="http://www.springframework.org/schema/security/oauth" 
		xsi:schemaLocation="http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/security/oauth
		http://www.springframework.org/schema/security/spring-security-oauth.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">


        <!-- ================================================================================== -->
        <!-- Global Security Settings -->
        <!-- ================================================================================== -->

        <!-- This allows authorizaion annotations to be used in our classes. See the Controllers. -->
	
        <security:global-method-security pre-post-annotations="enabled" />

        <!-- ================================================================================== -->
        <!-- Static Content Security -->
        <!-- ================================================================================== -->

        <!-- This is here to ensure that the static content (JavaScript, CSS, etc) is accessible -->
        <!-- from the login page without authentication -->
	
        <security:http security="none" pattern="/resource/**" />


        <!-- ================================================================================== -->
        <!-- Form and Security Access Configuration -->
        <!-- ================================================================================== -->

        <!-- Below is the configuration for the login form. The first line does the following: -->
        <!-- use-expressions: this allows us to use expressions in our intercept-url access configuration. -->
        <!-- access-denied-page: this is the page users will be redirected to when they try to access protected areas. -->
        <!-- disable-url-rewriting: this avoids having the JSESSIONID plastered in the URL -->
        <security:http use-expressions="true" disable-url-rewriting="true">
            <security:access-denied-handler error-page="/error" />
            <!-- The session management is used to ensure the user only has one session. This isn't -->
            <!-- compulsory but can add some extra security to your application. -->
		
            <security:session-management invalid-session-url="/login?time=1">
                <security:concurrency-control max-sessions="1" expired-url="/login?time=1" />
            </security:session-management>

            <!-- This is where we configure our login form. -->
            <!-- login-page: the page that contains the login screen -->
            <!-- login-processing-url: this is the URL to which the login form should be submitted -->
            <!-- default-target-url: the URL to which the user will be redirected if they login successfully -->
            <!-- authentication-failure-url: the URL to which the user will be redirected if they fail login -->
            <!-- username-parameter: the name of the request parameter which contains the username -->
            <!-- password-parameter: the name of the request parameter which contains the password -->

            <security:form-login login-page="/login" default-target-url="/logged" login-processing-url="/login.do"
                        authentication-failure-url="/login?err=1" username-parameter="username" password-parameter="password" />
					
            <!-- This is where the logout page and process is configured. The logout-url is the URL to send -->
            <!-- the user to in order to logout, the logout-success-url is where they are taken if the logout -->
            <!-- is successful, and the delete-cookies and invalidate-session make sure that we clean up after logout -->
		
            <security:logout logout-url="/logout" logout-success-url="/login?out=1" delete-cookies="JSESSIONID" invalidate-session="true" />

            <!-- The intercept-url configuration is where we specify what roles are allowed access to what areas. -->
            <!-- We specifically force the connection to https for all the pages, although it could be sufficient -->
            <!-- just on the login page. The access parameter is where the expressions are used to control which  -->
            <!-- roles can access specific areas. One of the most important things is the order of the intercept-urls, -->
            <!-- the most catch-all type patterns should at the bottom of the list as the matches are executed -->
            <!-- in the order they are configured below. So /** should always be at the bottom of the list. -->
        
            

            <security:intercept-url requires-channel="https" pattern="/account/login*" access="permitAll()" />
            <security:intercept-url requires-channel="https" pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
        </security:http>


        <!-- ================================================================================== -->
        <!-- Authentication Providers for Form Login 											-->
        <!-- ================================================================================== -->

        <security:authentication-manager alias="authenticationManager">

            <!-- The authentication provider below uses MongoDB to store SHA1 hashed passwords -->
            <!-- To see how to configure users for the example below, please see the README file -->

            <security:authentication-provider user-service-ref="utilisateurService">
                <security:password-encoder ref="encoder" />
            </security:authentication-provider>


            <!-- The authentication provider below is the simplest provider you can use -->
            <!-- The users, their passwords and roles are all added as clear text -->

            <!-- <authentication-provider> -->
            <!-- <user-service> -->
            <!-- <user name="admin" password="admin" authorities="ROLE_ADMIN" /> -->
            <!-- <user name="user" password="user" authorities="ROLE_USER" /> -->
            <!-- </user-service> -->
            <!-- </authentication-provider> -->


            <!-- The authentication provider below hashes incoming passwords using SHA1 -->
            <!-- The users passwords below are hashed using SHA1 (see README for values) -->

            <!-- <authentication-provider> -->
            <!-- <password-encoder hash="sha" /> -->
            <!-- <user-service> -->
            <!-- <user name="admin" password="d033e22ae348aeb5660fc2140aec35850c4da997" authorities="ROLE_ADMIN" /> -->
            <!-- <user name="user" password="12dea96fec20593566ab75692c9949596833adc9" authorities="ROLE_USER" /> -->
            <!-- </user-service> -->
            <!-- </authentication-provider> -->


            <!-- The authentication provider below uses JDBC to retrieve your credentials  -->
            <!-- The data source bean configuration can be found at the bottom of this file -->
            <!-- The first example uses the default Spring Security tables, see link below -->
            <!-- http://docs.spring.io/spring-security/site/docs/3.0.x/reference/appendix-schema.html -->

            <!-- <authentication-provider> -->
            <!-- <jdbc-user-service data-source-ref="dataSource" /> -->
            <!-- <password-encoder hash="sha" /> -->
            <!-- </authentication-provider> -->
		
            <!-- The second example shows how you can override the default queries in order -->
            <!-- to use your own tables rather than Spring Security's default tables -->
            <!-- The SQL is relatively simple and should be easy to figure out and map to your needs -->

            <!--<security:authentication-provider>
                <security:password-encoder ref="encoder" />
                <security:jdbc-user-service data-source-ref="dataSource"
                                   users-by-username-query="select identifiant_utilisateur, mdp_utilisateur from utilisateur where identifiant_utilisateur=?"
                                   authorities-by-username-query="select u.identifiant_utilisateur, t.libelle from utilisateur u, type_utilisateur t where u.utilisateur_type = t.id_type_utilisateur and u.identifiant_utilisateur =?" />
            </security:authentication-provider>-->

        </security:authentication-manager>

    </b:beans>
